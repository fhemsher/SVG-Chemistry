<!DOCTYPE html>
<meta charset="utf-8">

<head>
    <link rel="stylesheet" type="text/css" href="./../dist/molecules.css">
    <script src="./../dist/molecules.min.js"></script>
    <script src="./../lib/d3.min.js"></script>


<meta http-equiv="content-type" content="text/html; charset=UTF-8">

</head>



<body onload=sendSize() style=background:white;padding:0px;font-family:arial >

 <div id=containerDiv style='background:white;'>
<center><b>Preview SVG Molecules</b>



<br>
Chemical Name:<input type="text" id=chemicalNameValue  style=width:180px />
 <p></p>
    <div><a href="https://opsin.ch.cam.ac.uk/" target="_blank">Search chemical name for its SMILES Notation</a></div>
<p></p>

SMILES:<input placeholder="Paste SMILES Notation here..." type="text" id=smilesValue  style=width:440px />


<p></p><button onclick=loadSmiles()>Load SMILES</button>
<table>
<!--<g xmlns="http://www.w3.org/2000/svg" id="component1529083832140" nativeWidth="40" nativeHeight="40" myscale="1.0" transform="translate(-56,-84)" category="Element" title="Symbol" description="Hydrogen" name="Francis Hemsher" email="fhemsher@gmail.com" utcMS="1529083832140" parentid="component1529083832140"><defs><radialGradient id="fill15290837477890" cx="50%" cy="50%" r="75%" fx="50%" fy="50%"><stop offset="0%" stop-color="#1E90FF" stop-opacity="1"/><stop offset="100%" stop-color="#000000" stop-opacity="1"/></radialGradient></defs><circle stroke="#1E90FF" stroke-width="2" fill="url(#fill15290837477890)" transform="matrix(1 0 0 1 76 104)" r="20"/><text font-family="Arial" font-size="20" font-weight="bold" font-style="normal" stroke="none" stroke-width="0" fill="#FFFFFF" transform="matrix(1 0 0 1 67 111)">H</text><rect width="40" height="40" stroke="none" fill="white" fill-opacity="0" transform="translate(56,84)"/></g> -->


    <tr><td valign=top>
     <svg width=10 height=10 overflow="visible"><circle r="4" class="atom-H"></svg>H
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-He" ></svg>He
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-B" ></svg>B
    <br><svg width=10 height=10  overflow="visible"><circle r="8"  class="atom-C"  ></svg>C
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-N" ></svg>N
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-O" ></svg>O
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-F" ></svg>F
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-Na" ></svg>Na
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-Si" ></svg>Si
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-P" ></svg>P
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-S" ></svg>S
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-Cl" ></svg>Cl
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-As" ></svg>As
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-Se" ></svg>Se
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-Br" ></svg>Br
    <br><svg width=10 height=10  overflow="visible"><circle r="8" class="atom-I" ></svg>I
    </td>
 <td valign=top><div id=svgDiv style='width:400px;height:400px;border:1px solid black'></div></td>
    </tr>



</table>


  <div style='color:blue' id="molecularFormulaDiv"></div>


 <button id=addMoleculeButton disabled onClick=parent.addMolecule() >Add Molecule</button>
</center>
</div>
 <button title="Close molecule preview" onclick=parent.closeMoleculePreview() style='position:absolute;top:10px;left:90%'>X</button>

</body>

<script>



 //---button----
 var PlotWidth=400
 var PlotHeight=400
function loadSmiles()
{

 addMoleculeButton.disabled=false
  var input=smilesValue.value
       if(input.length>200)
        {
            PlotWidth=800
            PlotHeight=800
            svgDiv.style.width=PlotWidth+"px"
            svgDiv.style.height=PlotHeight+"px"

            sendSize()

        }
        mainPanel.attr("viewBox", "0 0 " + PlotWidth + " " +  PlotHeight + "")
      parent.ChemicalName=chemicalNameValue.value
        forceProperties.size=[PlotWidth, PlotHeight],
         force.size(forceProperties.size)

  var molecule = Molecules.load.smiles(input)

    if (typeof molecule === 'object') { update(molecule); }

}


//
// molecules.js --> d3.js
//
function convertMolecule(molecule) {

    var atoms = Object.keys(molecule.atoms);
    var bonds = Object.keys(molecule.bonds);

    var nodes = [];
    var links = [];

    for (var i = 0; i < atoms.length; i++) {

        nodes.push({
            id: molecule.atoms[atoms[i]].id,
            name: molecule.atoms[atoms[i]].name,
            protons: molecule.atoms[atoms[i]].protons,
            neutrons: molecule.atoms[atoms[i]].neutrons,
            electrons: molecule.atoms[atoms[i]].electrons,
            bonds: molecule.atoms[atoms[i]].bonds,
            properties: molecule.atoms[atoms[i]].properties
        })
    }

    for (var i = 0; i < bonds.length; i++) {

        links.push({
            id: molecule.bonds[bonds[i]].id,
            name: molecule.bonds[bonds[i]].name,
            value: molecule.bonds[bonds[i]].value,
            source: atoms.indexOf(molecule.bonds[bonds[i]].atoms[0]),
            target: atoms.indexOf(molecule.bonds[bonds[i]].atoms[1]),
            order: molecule.bonds[bonds[i]].order
        })
    }

    return {nodes: nodes, links: links};
}


var mainPanel = d3.select("#svgDiv")
    .append("svg")
    .attr("preserveAspectRatio", "xMinYMin meet")
    .attr("id", "previewMoleculeSVG")




//
// Initialize d3.js
//
var forceProperties = {
    charge         : -1200,
    chargeDistance : 500,
    linkStrength   : 1.5,
    linkDistance   : -40,
    gravity        : 1.3,
    friction       : 0.65,
    alpha          : 2.0

}

var force = d3.layout.force()
    .charge(forceProperties.charge)
    .chargeDistance(forceProperties.chargeDistance)
    .linkStrength(forceProperties.linkStrength)
    .linkDistance(forceProperties.linkDistance)
    .gravity(forceProperties.gravity)
    .friction(forceProperties.friction)
    .alpha(forceProperties.alpha);

//
// Update d3.js
//
function update(molecule) {

    //
    // Molecule Properties
    //
    var graph = convertMolecule(molecule);
    var nodes = force.nodes(graph.nodes);
    var links = force.links(graph.links);

    d3.selectAll(".node").remove()
    d3.selectAll(".separator").remove()

    //
    // Bond Properties
    //
    var bondMuliplier = 3;

    var piBond = {
        stroke: '#FFFFFF',
        strokeWidth: '2px'
    };

    var aromaticBond = {
        stroke: '#696969',
        strokeWidth: '3px',
        strokeDashArray: ("3,3")
    };

    var bond = mainPanel.selectAll("line.link")
        .data(graph.links, function(d) { return d.source + "-" + d.target; } )
        .enter();

    var singleBond = bond.append("svg:line")
        .filter(function (d) { return d.order == 1 | d.order == 2 | d.order == 3 })
        .attr("class", "link")
        .style("stroke-width", function(d) { return (d.order * bondMuliplier - 1) * (bondMuliplier/2) + "px"; })

    var doubleBond = bond.append("svg:line")
        .filter(function (d) { return d.order == 2 })
        .attr("class", "separator")
        .style("stroke-width", piBond.strokeWidth)
        .style("stroke", piBond.stroke)

    var aromaticBond_1 = bond.append("svg:line")
        .filter(function (d) { return d.order == 1.5 })
        .attr("class", "separator")
        .style("stroke-width", aromaticBond.strokeWidth)
        .style("stroke", aromaticBond.stroke)

    var aromaticBond_2 = bond.append("svg:line")
        .filter(function (d) { return d.order == 1.5 })
        .attr("class", "link")
        .style("stroke-width", aromaticBond.strokeWidth)
        .style("stroke", aromaticBond.stroke)
        .style("stroke-dasharray", aromaticBond.strokeDashArray)

    var tripleBond_1 = bond.append("svg:line")
        .filter(function (d) { return d.order == 3 })
        .attr("class", "separator")
        .style("stroke-width", piBond.strokeWidth)
        .style("stroke", piBond.stroke)

    var tripleBond_2 = bond.append("svg:line")
        .filter(function (d) { return d.order == 3 })
        .attr("class", "separator")
        .style("stroke-width", piBond.strokeWidth)
        .style("stroke", piBond.stroke)

    mainPanel.selectAll("line.link")
        .data(graph.links, function(d) { return d.source + "-" + d.target; } )
        .exit().remove();

    //
    // Atom Properties
    //
    var maxProtons = 11;
    var maxRadius = 10;
    var minRadius = 2.7;
    var atomMultiplier = 2.8;

    var atom = mainPanel.selectAll("circle")
        .data(graph.nodes, function(d) { return Math.random(); });

    atom.enter()
        .append("circle")
        .attr("class", "node")
        .attr("class", function(d) { return 'atom-' + d.name; })
        .attr("r", function(d) { return (d.protons < maxProtons) ? (Math.sqrt(d.protons + minRadius) * atomMultiplier) : maxRadius; })
        .call(force.drag)


    atom.exit()
        .remove();

    //
    // XY Coordinates
    //
    var atomRadius = 9;
    var bondOffset = 2;

    force.start();

    force.on("tick", function () {

        singleBond
            .attr("x1", function(d) { return d.source.x; })
            .attr("y1", function(d) { return d.source.y; })
            .attr("x2", function(d) { return d.target.x; })
            .attr("y2", function(d) { return d.target.y; });

        doubleBond
            .attr("x1", function(d) { return d.source.x; })
            .attr("y1", function(d) { return d.source.y; })
            .attr("x2", function(d) { return d.target.x; })
            .attr("y2", function(d) { return d.target.y; });

        aromaticBond_1
            .attr("x1", function(d) { return d.source.x - xOffset(bondOffset, d.source, d.target) })
            .attr("y1", function(d) { return d.source.y - yOffset(bondOffset, d.source, d.target) })
            .attr("x2", function(d) { return d.target.x - xOffset(bondOffset, d.source, d.target) })
            .attr("y2", function(d) { return d.target.y - yOffset(bondOffset, d.source, d.target) });

        aromaticBond_2
            .attr("x1", function(d) { return d.source.x - xOffset(-bondOffset, d.source, d.target) })
            .attr("y1", function(d) { return d.source.y - yOffset(-bondOffset, d.source, d.target) })
            .attr("x2", function(d) { return d.target.x - xOffset(-bondOffset, d.source, d.target) })
            .attr("y2", function(d) { return d.target.y - yOffset(-bondOffset, d.source, d.target) });

        tripleBond_1
            .attr("x1", function(d) { return d.source.x - xOffset(bondOffset, d.source, d.target) })
            .attr("y1", function(d) { return d.source.y - yOffset(bondOffset, d.source, d.target) })
            .attr("x2", function(d) { return d.target.x - xOffset(bondOffset, d.source, d.target) })
            .attr("y2", function(d) { return d.target.y - yOffset(bondOffset, d.source, d.target) });

        tripleBond_2
            .attr("x1", function(d) { return d.source.x - xOffset(-bondOffset, d.source, d.target) })
            .attr("y1", function(d) { return d.source.y - yOffset(-bondOffset, d.source, d.target) })
            .attr("x2", function(d) { return d.target.x - xOffset(-bondOffset, d.source, d.target) })
            .attr("y2", function(d) { return d.target.y - yOffset(-bondOffset, d.source, d.target) });

        atom
            .attr("cx", function(d) { return d.x = Math.max(atomRadius, Math.min(PlotWidth - atomRadius, d.x)); })
            .attr("cy", function(d) { return d.y = Math.max(atomRadius, Math.min(PlotHeight - atomRadius, d.y)); });

    });

    // Update text
    if (typeof molecule === 'object') {
        updateMolecularWeight(molecule);
        updateMolecularFormula(molecule);
    }
    removeEmptyLines()

}

//
// Helper Functions
//
function removeEmptyLines()
{
   var smiles= smilesValue.value
     previewMoleculeSVG.setAttribute("smiles",smiles)

console.log(previewMoleculeSVG)
   for(var k=previewMoleculeSVG.childNodes.length-1;k>=0;k--)
   {
      var node=previewMoleculeSVG.childNodes.item(k)
      if(node.nodeName=="line"&& !node.getAttribute("class"))
        previewMoleculeSVG.removeChild(node)
   }
      parent.SMILES=smiles

}





function xOffset(offset, source, target) {
    var dx = target.x - source.x;
    var dy = target.y - source.y;
    if (dy === 0 || Math.abs(dx/dy) > 1) { return offset * (dy/dx); }
    else { return offset; }
}

function yOffset(offset, source, target) {
    var dx = target.x - source.x;
    var dy = target.y - source.y;
    if (dy === 0 || Math.abs(dx/dy) > 1) { return -offset; }
    else { return offset * -(dx/dy); }
}

//
// Text Functions
//
function getAtomText(atom) {

    var str = atom.name;
    var x = atom.properties.charge;
    var n = '';

    if (x !== 0) {

        if (x === 1) { n = '+'; }
        else if ( x > 1 ) { n = x + '+' }
        else if ( x === -1 ) { n = '-' }
        else if ( x < -1 ) { n = x + '-' }

        str = str.concat('<sup>' + n + '</sup>');
    }

    return str
}

function updateMolecularWeight(molecule) {

    var decimalPoints = Math.pow(10, 2);
    //var molecularWeight = (Math.round(molecule.properties.mass * decimalPoints) / decimalPoints) + ' g/mol';

    //document.getElementById("molecularWeight").innerHTML = molecularWeight;
}

function updateMolecularFormula(molecule) {

    var molecularFormula = [];
    var atoms = Object.keys(molecule.properties.formula).sort();

    var charge = 0;

    Object.keys(molecule.atoms).forEach(function (key) {
        charge += molecule.atoms[key].properties.charge;
    });

    function updateFormula(atomName) {
        var atomCount = molecule.properties.formula[atomName];

        if (atomCount === 1) { molecularFormula.push(atomName); }
        else { molecularFormula.push(atomName + atomCount); }

        atoms.splice(atoms.indexOf(atomName), 1);
    }

    if (atoms.indexOf('Li') !== -1) { updateFormula('Li'); }
    if (atoms.indexOf('Na') !== -1) { updateFormula('Na'); }
    if (atoms.indexOf('Mg') !== -1) { updateFormula('Mg'); }
    if (atoms.indexOf('K') !== -1)  { updateFormula('K'); }
    if (atoms.indexOf('Ca') !== -1) { updateFormula('Ca'); }

    if (atoms.indexOf('C') !== -1) { updateFormula('C'); }
    if (atoms.indexOf('H') !== -1) { updateFormula('H'); }

    while (atoms.length > 0) { updateFormula(atoms[0]); }

    molecularFormula = molecularFormula.join('').replace(/(\d+)/g, '<sub>$1</sub>');

    // Append molecule charge
    if (charge !== 0) {
        var n = '';

        if (charge === 1) { n = '+'; }
        else if ( charge > 1 ) { n = charge + '+' }
        else if ( charge === -1 ) { n = '-' }
        else if ( charge < -1 ) { n = charge + '-' }

        molecularFormula = molecularFormula.concat('<sup>' + n + '</sup>');
    }
        parent.MolecularFormula=molecularFormula
    molecularFormulaDiv.innerHTML ="Molecular Formula: "+ molecularFormula;

}

// Topology Functions
//
function getTopology(molecule) {

    var adjacency = Molecules.topology.matrix.adjacency(molecule);
    var distance = Molecules.topology.matrix.distance(adjacency);

    return {
        adjacent: adjacency,
        distance: distance
    };
}

function formatMatrix(input) {

    var output = [];

    for (var i = 0; i < input.length; i++) {
        output[i] = [];

        for (var j = 0; j < input[0].length; j++) {
            output[i][j] = { x: j, y: i, z: input[i][j] };
        }
    }

    return output;
 }

function updateMatrix(input) {

    var matrix = document.getElementById("matrix");
    var height =PlotHeight
    var width = PlotWidth
    var distance = formatMatrix(input.distance);

    support.append("rect")
        .attr("class", "background")
        .attr("width", width * 2)
        .attr("height", height)
        .attr("x", width*2);

    var x = d3.scale.ordinal().rangeBands([0, width*0.85]);
    var z = d3.scale.linear().domain([0, distance.length]).clamp(true);
    var c = d3.scale.linear().range(["red", "steelblue"]).interpolate(d3.interpolateHcl);

    c.domain(d3.range(distance.length));
    x.domain(d3.range(input.header.length));

    var row = support.selectAll(".row")
        .data(distance)
        .enter().append("g")
        .attr("class", "row")
        .attr("transform", function(d, i) { return "translate(" + (width * 0.1) + "," + (x(i) + height * 0.1) + ")"; })
        .each(row);

    row.append("line")
        .attr("x2", -width);

    row.append("text")
        .attr("x", (x.rangeBand() / 2) - (x.rangeBand()/1.5))
        .attr("y", x.rangeBand() / 2)
        .attr("dy", ".32em")
        .attr("text-anchor", "end")
        .text(function(d, i) { return input.header[i]; });

    var column = support.selectAll(".column")
        .data(distance)
        .enter().append("g")
        .attr("class", "column")
        .attr("transform", function(d, i) { return "translate(" + x(i) + ")rotate(0)"; });

    column.append("line")
        .attr("x1", -width);

    column.append("text")
        .attr("x", x.rangeBand())
        .attr("y", (x.rangeBand() / 1.5))
        .attr("dy", ".32em")
        .attr("text-anchor", "start")
        .text(function(d, i) { return input.header[i]; });

    function row(row) {

        var cell = d3.select(this).selectAll(".cell")
            .data(row.filter(function(d) { return d.z; }))
            .enter().append("rect")
            .attr("class", "cell")
            .attr("x", function(d) { return x(d.x); })
            .attr("width", x.rangeBand()*0.97)
            .attr("height", x.rangeBand()*0.97)
            .style("fill-opacity", function(d) { return z(d.z)+0.4; })
            .style("fill", function(d) { return c(d.z-1); });
    }
}

//


//
// SMILES Examples
//
var randomMolecule = [
    'CCCCC',
    'CC(C)CC',
    'CC(C)(C)C',
    'CC=CC',
    'C=CCC',
    'C/C=C\C',
    'C/C=C/C',
    'C=CC=C',
    'C=C=CC',
    'CC#CC',
    'C#CCC',
    'OCCCC',
    'CC(O)CC',
    'CC(O)(C)C',
    'C(=O)CCC',
    'CC(=O)CC',
    'OC(CCC)=O',
    'O=C(CC)OC',
    'NC(CCC)=O',
    'O=C(CCC)OO',
    'ClC(CCC)=O',
    'O=C(CC)OC(C)=O',
    'C1CCCCC1',
    'C1CCCCC1C2CCCCC2',
    'C12(CCCCC1)CCCCC2',
    'C1C=CCC=C1',
    '[C@H]1=[C@@H][C@@H]=[C@@H][C@@H]=[C@@H][C@@H]=[C@@H]1',
    'c1ccccc1',
    'OCc1ccccc1',
    'c1ccccc1-c2ccccc2',
    'C12=CC=CC=C1C3=C(C=CC=C3)C=C2',
    'C1=CC=CN1',
    'c1occc1',
    'c1sccc1',
    '[CH3+]',
    '[CH3-]',
    '[Na+].[Cl-]',
    '[NH4+].[NH4+].[O-]S(=O)(=O)[S-]',
    'C[13CH](C)C',
    'C[14CH](C)C',
    'C[C@@H](Br)Cl',
    'C[C@H](Br)Cl',
    'O[C@@]([H])(O1)[C@@](O)([H])[C@@]([H])(O)[C@]1([C@@](CO)(O)[H])[H]',
    'NC(C)C(O)=O',
    'NC(CCCNC(N)=N)C(O)=O',
    'NC(CC(N)=O)C(O)=O',
    'NC(CC(O)=O)C(O)=O',
    'NC(CS)C(O)=O',
    'NC(CCC(O)=O)C(O)=O',
    'NC(CCC(N)=O)C(O)=O',
    'NC([H])C(O)=O',
    'NC(CC1=CNC=N1)C(O)=O',
    'NC(C(CC)C)C(O)=O',
    'C((C))O',
    '(N1CCCCC1)',
    'CC(=O)C(Cl)CC(C(C)C)C=C',
    'C2C(=O)C1COCCC1CC2',
    'CC(CC(Cl)CCO)C',
    'CC1C(CC(CC1C)CCO)=O',
    'NC(C(CC)C)C(O)=O',
    'C[C+](C)C'
];

</script>
<script>

function sendSize()
{

   var width=containerDiv.scrollWidth+30
   var height=containerDiv.scrollHeight+30


    parent.previewMoleculeFrame.style.width=width +"px"
    parent.previewMoleculeFrame.style.height=height +"px"


    parent.previewMoleculeFrameDiv.style.width=width +"px"
    parent.previewMoleculeFrameDiv.style.height=height +"px"

}

</script>